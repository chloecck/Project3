{
	"info": {
		"_postman_id": "33ec8c11-a955-41ae-b67e-38f4021bd9e3",
		"name": "s03.forum: users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31693814"
	},
	"item": [
		{
			"name": "---templates---",
			"item": [
				{
					"name": "create user",
					"item": [
						{
							"name": "/user: create user #Ext1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"return id, key, username, display_name\", () => {\r",
											"  pm.response.to.have.status(200);\r",
											"  pm.response.to.have.jsonBody(\"id\");\r",
											"  pm.response.to.have.jsonBody(\"key\");\r",
											"  pm.response.to.have.jsonBody(\"username\");\r",
											"  pm.response.to.have.jsonBody(\"display_name\");\r",
											"});\r",
											"\r",
											"const res = pm.response.json();\r",
											"const { id = null, key = null, username = null, display_name = null } = res;\r",
											"\r",
											"pm.test(\"'id' is a postive int\", () => {\r",
											"  pm.expect(Number.isInteger(id)).to.be.true;\r",
											"  pm.expect(id > 0).to.be.true;\r",
											"});\r",
											"pm.test(\"'key' is a non-trival, truthy string\", () => {\r",
											"  pm.expect(typeof key === 'string').to.be.true;\r",
											"  pm.expect(!key.trim()).to.be.false;\r",
											"});\r",
											"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
											"  pm.expect(typeof username === 'string').to.be.true;\r",
											"  pm.expect(!username.trim()).to.be.false;\r",
											"});\r",
											"pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
											"  pm.expect(typeof display_name === 'string').to.be.true;\r",
											"  pm.expect(!display_name.trim()).to.be.false;\r",
											"});\r",
											"\r",
											"const user0 = { id, key, username, display_name };\r",
											"const jsonEncoded = JSON.stringify(user0, (k, v) => {\r",
											"  if (typeof v === \"string\") {\r",
											"    return encodeURIComponent(v);\r",
											"  }\r",
											"  return v;\r",
											"});\r",
											"\r",
											"pm.environment.set(\"user0\", jsonEncoded);\r",
											"\r",
											"// pm.test(\"\", () => {\r",
											"//   pm.response.to.have.status(400);\r",
											"//   pm.response.to.have.jsonBody(\"err\");\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:5000/user",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "/user: create user #Ext1 --no-display_name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"return id, key, username\", () => {\r",
											"  pm.response.to.have.status(200);\r",
											"  pm.response.to.have.jsonBody(\"id\");\r",
											"  pm.response.to.have.jsonBody(\"key\");\r",
											"  pm.response.to.have.jsonBody(\"username\");\r",
											"});\r",
											"\r",
											"const res = pm.response.json();\r",
											"const { id = null, key = null, username = null, display_name = null } = res;\r",
											"\r",
											"pm.test(\"'id' is a postive int\", () => {\r",
											"  pm.expect(Number.isInteger(id)).to.be.true;\r",
											"  pm.expect(id > 0).to.be.true;\r",
											"});\r",
											"pm.test(\"'key' is a non-trival, truthy string\", () => {\r",
											"  pm.expect(typeof key === 'string').to.be.true;\r",
											"  pm.expect(!key.trim()).to.be.false;\r",
											"});\r",
											"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
											"  pm.expect(typeof username === 'string').to.be.true;\r",
											"  pm.expect(!username.trim()).to.be.false;\r",
											"});\r",
											"\r",
											"const user0 = { id, key, username, display_name };\r",
											"const jsonEncoded = JSON.stringify(user0, (k, v) => {\r",
											"  if (typeof v === \"string\") {\r",
											"    return encodeURIComponent(v);\r",
											"  }\r",
											"  return v;\r",
											"});\r",
											"\r",
											"pm.environment.set(\"user0\", jsonEncoded);\r",
											"\r",
											"// pm.test(\"\", () => {\r",
											"//   pm.response.to.have.status(400);\r",
											"//   pm.response.to.have.jsonBody(\"err\");\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"${{$randomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:5000/user",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "------",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.execution.skipRequest();\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "/user: create user #Ext1 --no-username",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"missing 'username'\", () => {\r",
											"  pm.response.to.have.status(400);\r",
											"  pm.response.to.have.jsonBody(\"err\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:5000/user",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "/user: create user #Ext1 --no-username/display_name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"missing 'username'\", () => {\r",
											"  pm.response.to.have.status(400);\r",
											"  pm.response.to.have.jsonBody(\"err\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:5000/user",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"user"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "read user metadata",
					"item": [
						{
							"name": "/user: read user metadata #Ext2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"return user_id, username, display_name\", () => {\r",
											"  pm.response.to.have.status(200);\r",
											"  pm.response.to.have.jsonBody(\"user_id\");\r",
											"  pm.response.to.have.jsonBody(\"username\");\r",
											"  pm.response.to.have.jsonBody(\"display_name\");\r",
											"});\r",
											"\r",
											"const res = pm.response.json();\r",
											"const { user_id = null, username = null, display_name = null } = res;\r",
											"\r",
											"pm.test(\"'user_id' is a postive int\", () => {\r",
											"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
											"  pm.expect(user_id > 0).to.be.true;\r",
											"});\r",
											"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
											"  pm.expect(typeof username === 'string').to.be.true;\r",
											"  pm.expect(!username.trim()).to.be.false;\r",
											"});\r",
											"if (display_name !== null) {\r",
											"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
											"    pm.expect(typeof display_name === 'string').to.be.true;\r",
											"    pm.expect(!display_name.trim()).to.be.false;\r",
											"  });\r",
											"}\r",
											"\r",
											"const theUser = JSON.parse(pm.environment.get(\"user0\"), (k, v) => {\r",
											"  if (typeof v === 'string') {\r",
											"    return decodeURIComponent(v);\r",
											"  }\r",
											"  return v;\r",
											"})\r",
											"pm.test(\"return correct user_id, username, display_name\", () => {\r",
											"  pm.expect(user_id).equal(theUser.id);\r",
											"  pm.expect(username).equal(theUser.username);\r",
											"  pm.expect(display_name).equal(theUser.display_name);\r",
											"})\r",
											"\r",
											"// pm.test(\"\", () => {\r",
											"//   pm.response.to.have.status(404);\r",
											"//   pm.response.to.have.jsonBody(\"err\");\r",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
											"\r",
											"pm.environment.set(\"user0_id\", user0.id);\r",
											"pm.environment.set(\"user0_username\", user0.username);\r",
											"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:5000/user?id={{user0_id}}&username={{user0_username}}",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"user"
									],
									"query": [
										{
											"key": "id",
											"value": "{{user0_id}}"
										},
										{
											"key": "username",
											"value": "{{user0_username}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/user: read user metadata #Ext2 --no-user_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"return user_id, username, display_name\", () => {\r",
											"  pm.response.to.have.status(200);\r",
											"  pm.response.to.have.jsonBody(\"user_id\");\r",
											"  pm.response.to.have.jsonBody(\"username\");\r",
											"  pm.response.to.have.jsonBody(\"display_name\");\r",
											"});\r",
											"\r",
											"const res = pm.response.json();\r",
											"const { user_id = null, username = null, display_name = null } = res;\r",
											"\r",
											"pm.test(\"'user_id' is a postive int\", () => {\r",
											"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
											"  pm.expect(user_id > 0).to.be.true;\r",
											"});\r",
											"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
											"  pm.expect(typeof username === 'string').to.be.true;\r",
											"  pm.expect(!username.trim()).to.be.false;\r",
											"});\r",
											"if (display_name !== null) {\r",
											"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
											"    pm.expect(typeof display_name === 'string').to.be.true;\r",
											"    pm.expect(!display_name.trim()).to.be.false;\r",
											"  });\r",
											"}\r",
											"\r",
											"const theUser = JSON.parse(pm.environment.get(\"user0\"), (k, v) => {\r",
											"  if (typeof v === 'string') {\r",
											"    return decodeURIComponent(v);\r",
											"  }\r",
											"  return v;\r",
											"})\r",
											"pm.test(\"return correct user_id, username, display_name\", () => {\r",
											"  pm.expect(user_id).equal(theUser.id);\r",
											"  pm.expect(username).equal(theUser.username);\r",
											"  pm.expect(display_name).equal(theUser.display_name);\r",
											"})\r",
											"\r",
											"// pm.test(\"\", () => {\r",
											"//   pm.response.to.have.status(404);\r",
											"//   pm.response.to.have.jsonBody(\"err\");\r",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
											"\r",
											"pm.environment.set(\"user0_id\", user0.id);\r",
											"pm.environment.set(\"user0_username\", user0.username);\r",
											"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:5000/user?username={{user0_username}}",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"user"
									],
									"query": [
										{
											"key": "username",
											"value": "{{user0_username}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/user: read user metadata #Ext2 --no-username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"return user_id, username, display_name\", () => {\r",
											"  pm.response.to.have.status(200);\r",
											"  pm.response.to.have.jsonBody(\"user_id\");\r",
											"  pm.response.to.have.jsonBody(\"username\");\r",
											"  pm.response.to.have.jsonBody(\"display_name\");\r",
											"});\r",
											"\r",
											"const res = pm.response.json();\r",
											"const { user_id = null, username = null, display_name = null } = res;\r",
											"\r",
											"pm.test(\"'user_id' is a postive int\", () => {\r",
											"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
											"  pm.expect(user_id > 0).to.be.true;\r",
											"});\r",
											"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
											"  pm.expect(typeof username === 'string').to.be.true;\r",
											"  pm.expect(!username.trim()).to.be.false;\r",
											"});\r",
											"if (display_name !== null) {\r",
											"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
											"    pm.expect(typeof display_name === 'string').to.be.true;\r",
											"    pm.expect(!display_name.trim()).to.be.false;\r",
											"  });\r",
											"}\r",
											"\r",
											"const theUser = JSON.parse(pm.environment.get(\"user0\"), (k, v) => {\r",
											"  if (typeof v === 'string') {\r",
											"    return decodeURIComponent(v);\r",
											"  }\r",
											"  return v;\r",
											"})\r",
											"pm.test(\"return correct user_id, username, display_name\", () => {\r",
											"  pm.expect(user_id).equal(theUser.id);\r",
											"  pm.expect(username).equal(theUser.username);\r",
											"  pm.expect(display_name).equal(theUser.display_name);\r",
											"})\r",
											"\r",
											"// pm.test(\"\", () => {\r",
											"//   pm.response.to.have.status(404);\r",
											"//   pm.response.to.have.jsonBody(\"err\");\r",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
											"\r",
											"pm.environment.set(\"user0_id\", user0.id);\r",
											"pm.environment.set(\"user0_username\", user0.username);\r",
											"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:5000/user?id={{user0_id}}",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"user"
									],
									"query": [
										{
											"key": "id",
											"value": "{{user0_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/user: read user metadata #Ext2 --user_id&fake-username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"return user_id, username, display_name\", () => {\r",
											"  pm.response.to.have.status(200);\r",
											"  pm.response.to.have.jsonBody(\"user_id\");\r",
											"  pm.response.to.have.jsonBody(\"username\");\r",
											"  pm.response.to.have.jsonBody(\"display_name\");\r",
											"});\r",
											"\r",
											"const res = pm.response.json();\r",
											"const { user_id = null, username = null, display_name = null } = res;\r",
											"\r",
											"pm.test(\"'user_id' is a postive int\", () => {\r",
											"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
											"  pm.expect(user_id > 0).to.be.true;\r",
											"});\r",
											"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
											"  pm.expect(typeof username === 'string').to.be.true;\r",
											"  pm.expect(!username.trim()).to.be.false;\r",
											"});\r",
											"if (display_name !== null) {\r",
											"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
											"    pm.expect(typeof display_name === 'string').to.be.true;\r",
											"    pm.expect(!display_name.trim()).to.be.false;\r",
											"  });\r",
											"}\r",
											"\r",
											"const theUser = JSON.parse(pm.environment.get(\"user0\"), (k, v) => {\r",
											"  if (typeof v === 'string') {\r",
											"    return decodeURIComponent(v);\r",
											"  }\r",
											"  return v;\r",
											"})\r",
											"pm.test(\"return correct user_id, username, display_name\", () => {\r",
											"  pm.expect(user_id).equal(theUser.id);\r",
											"  pm.expect(username).equal(theUser.username);\r",
											"  pm.expect(display_name).equal(theUser.display_name);\r",
											"})\r",
											"\r",
											"// pm.test(\"\", () => {\r",
											"//   pm.response.to.have.status(404);\r",
											"//   pm.response.to.have.jsonBody(\"err\");\r",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
											"\r",
											"pm.environment.set(\"user0_id\", user0.id);\r",
											"pm.environment.set(\"user0_username\", user0.username);\r",
											"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:5000/user?id={{user0_id}}&username={{$randomUserName}}",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"user"
									],
									"query": [
										{
											"key": "id",
											"value": "{{user0_id}}"
										},
										{
											"key": "username",
											"value": "{{$randomUserName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/user: read user metadata #Ext2 --fake-user_id&username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"return user_id, username, display_name\", () => {\r",
											"  pm.response.to.have.status(200);\r",
											"  pm.response.to.have.jsonBody(\"user_id\");\r",
											"  pm.response.to.have.jsonBody(\"username\");\r",
											"  pm.response.to.have.jsonBody(\"display_name\");\r",
											"});\r",
											"\r",
											"const res = pm.response.json();\r",
											"const { user_id = null, username = null, display_name = null } = res;\r",
											"\r",
											"pm.test(\"'user_id' is a postive int\", () => {\r",
											"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
											"  pm.expect(user_id > 0).to.be.true;\r",
											"});\r",
											"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
											"  pm.expect(typeof username === 'string').to.be.true;\r",
											"  pm.expect(!username.trim()).to.be.false;\r",
											"});\r",
											"if (display_name !== null) {\r",
											"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
											"    pm.expect(typeof display_name === 'string').to.be.true;\r",
											"    pm.expect(!display_name.trim()).to.be.false;\r",
											"  });\r",
											"}\r",
											"\r",
											"const theUser = JSON.parse(pm.environment.get(\"user0\"), (k, v) => {\r",
											"  if (typeof v === 'string') {\r",
											"    return decodeURIComponent(v);\r",
											"  }\r",
											"  return v;\r",
											"})\r",
											"pm.test(\"return correct user_id, username, display_name\", () => {\r",
											"  pm.expect(user_id).equal(theUser.id);\r",
											"  pm.expect(username).equal(theUser.username);\r",
											"  pm.expect(display_name).equal(theUser.display_name);\r",
											"})\r",
											"\r",
											"// pm.test(\"\", () => {\r",
											"//   pm.response.to.have.status(404);\r",
											"//   pm.response.to.have.jsonBody(\"err\");\r",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
											"\r",
											"pm.environment.set(\"user0_id\", user0.id);\r",
											"pm.environment.set(\"user0_username\", user0.username);\r",
											"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:5000/user?id={{$randomInt}}&username={{user0_username}}",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"user"
									],
									"query": [
										{
											"key": "id",
											"value": "{{$randomInt}}"
										},
										{
											"key": "username",
											"value": "{{user0_username}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "------",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.execution.skipRequest();\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "/user: read user metadata #Ext2 --no-user_id/username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"user not found\", () => {\r",
											"  pm.response.to.have.status(404);\r",
											"  pm.response.to.have.jsonBody(\"err\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
											"\r",
											"pm.environment.set(\"user0_id\", user0.id);\r",
											"pm.environment.set(\"user0_username\", user0.username);\r",
											"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:5000/user",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "/user: read user metadata #Ext2 --fake-user_id&fake-username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"user not found\", () => {\r",
											"  pm.response.to.have.status(404);\r",
											"  pm.response.to.have.jsonBody(\"err\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
											"\r",
											"pm.environment.set(\"user0_id\", user0.id);\r",
											"pm.environment.set(\"user0_username\", user0.username);\r",
											"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:5000/user?id={{$randomInt}}&username={{$randomUserName}}",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"user"
									],
									"query": [
										{
											"key": "id",
											"value": "{{$randomInt}}"
										},
										{
											"key": "username",
											"value": "{{$randomUserName}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "edit user metadata",
					"item": [
						{
							"name": "/user/<id>/edit/<key>: edit user metadata #Ext2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"return user_id, username, display_name\", () => {\r",
											"  pm.response.to.have.status(200);\r",
											"  pm.response.to.have.jsonBody(\"user_id\");\r",
											"  pm.response.to.have.jsonBody(\"username\");\r",
											"  pm.response.to.have.jsonBody(\"display_name\");\r",
											"});\r",
											"\r",
											"const res = pm.response.json();\r",
											"const { user_id = null, username = null, display_name = null } = res;\r",
											"\r",
											"pm.test(\"'user_id' is a postive int\", () => {\r",
											"  pm.expect(Number.isInteger(id)).to.be.true;\r",
											"  pm.expect(id > 0).to.be.true;\r",
											"});\r",
											"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
											"  pm.expect(typeof username === 'string').to.be.true;\r",
											"  pm.expect(!username.trim()).to.be.false;\r",
											"});\r",
											"pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
											"  pm.expect(typeof display_name === 'string').to.be.true;\r",
											"  pm.expect(!display_name.trim()).to.be.false;\r",
											"});\r",
											"\r",
											"const theUser = JSON.parse(pm.environment.get(\"user0\"), (k, v) => {\r",
											"  if (typeof v === 'string') {\r",
											"    return decodeURIComponent(v);\r",
											"  }\r",
											"  return v;\r",
											"})\r",
											"const req = JSON.parse(request.data);\r",
											"\r",
											"pm.test(\"'user_id' should not change\", () => {\r",
											"  pm.expect(user_id).equal(theUser.id);\r",
											"})\r",
											"pm.test(\"return updated username, display_name\", () => {\r",
											"  pm.expect(username).equal(req.username);\r",
											"  pm.expect(display_name).equal(req.display_name);\r",
											"})\r",
											"\r",
											"theUser.username = username;\r",
											"theUser.display_name = display_name;\r",
											"const jsonEncoded = JSON.stringify(theUser, (k, v) => {\r",
											"  if (typeof v === \"string\") {\r",
											"    return encodeURIComponent(v);\r",
											"  }\r",
											"  return v;\r",
											"});\r",
											"\r",
											"pm.environment.set(\"user0\", jsonEncoded);\r",
											"\r",
											"// pm.test(\"\", () => {\r",
											"//   pm.response.to.have.status(404);\r",
											"//   pm.response.to.have.jsonBody(\"err\");\r",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
											"\r",
											"pm.environment.set(\"user0_id\", user0.id);\r",
											"pm.environment.set(\"user0_key\", user0.key);\r",
											"pm.environment.set(\"user0_username\", user0.username);\r",
											"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:5000/user/{{user0_id}}/edit/{{user0_key}}",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"user",
										"{{user0_id}}",
										"edit",
										"{{user0_key}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "------",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.execution.skipRequest();\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"missing username\", () => {\r",
											"  pm.response.to.have.status(400);\r",
											"  pm.response.to.have.jsonBody(\"err\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
											"\r",
											"pm.environment.set(\"user0_id\", user0.id);\r",
											"pm.environment.set(\"user0_key\", user0.key);\r",
											"pm.environment.set(\"user0_username\", user0.username);\r",
											"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"display_name\": \"${{$randomFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:5000/user/{{user0_id}}/edit/{{user0_key}}",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"user",
										"{{user0_id}}",
										"edit",
										"{{user0_key}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-display_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"missing display_name\", () => {\r",
											"  pm.response.to.have.status(400);\r",
											"  pm.response.to.have.jsonBody(\"err\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
											"\r",
											"pm.environment.set(\"user0_id\", user0.id);\r",
											"pm.environment.set(\"user0_key\", user0.key);\r",
											"pm.environment.set(\"user0_username\", user0.username);\r",
											"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"{{$randomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:5000/user/{{user0_id}}/edit/{{user0_key}}",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"user",
										"{{user0_id}}",
										"edit",
										"{{user0_key}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-username-display_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"missing metatdata\", () => {\r",
											"  pm.response.to.have.status(400);\r",
											"  pm.response.to.have.jsonBody(\"err\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
											"\r",
											"pm.environment.set(\"user0_id\", user0.id);\r",
											"pm.environment.set(\"user0_key\", user0.key);\r",
											"pm.environment.set(\"user0_username\", user0.username);\r",
											"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:5000/user/{{user0_id}}/edit/{{user0_key}}",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"user",
										"{{user0_id}}",
										"edit",
										"{{user0_key}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --wrong-id&key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"return user_id, username\", () => {\r",
											"  pm.response.to.have.status(404);\r",
											"  pm.response.to.have.jsonBody(\"err\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
											"\r",
											"pm.environment.set(\"user0_id\", user0.id);\r",
											"pm.environment.set(\"user0_key\", user0.key);\r",
											"pm.environment.set(\"user0_username\", user0.username);\r",
											"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:5000/user/{{$randomInt}}/edit/{{user0_key}}",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"user",
										"{{$randomInt}}",
										"edit",
										"{{user0_key}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --id&wrong-key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"wrong key, forbidden\", () => {\r",
											"  pm.response.to.have.status(403);\r",
											"  pm.response.to.have.jsonBody(\"err\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
											"\r",
											"pm.environment.set(\"user0_id\", user0.id);\r",
											"pm.environment.set(\"user0_key\", user0.key);\r",
											"pm.environment.set(\"user0_username\", user0.username);\r",
											"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:5000/user/{{user0_id}}/edit/{{$randomPassword}}",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"user",
										"{{user0_id}}",
										"edit",
										"{{$randomPassword}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --existent-username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"'username' already exists\", () => {\r",
											"  pm.response.to.have.status(400);\r",
											"  pm.response.to.have.jsonBody(\"err\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
											"\r",
											"pm.environment.set(\"user0_id\", user0.id);\r",
											"pm.environment.set(\"user0_key\", user0.key);\r",
											"pm.environment.set(\"user0_username\", user0.username);\r",
											"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{user0_username}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:5000/user/{{user0_id}}/edit/{{user0_key}}",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "5000",
									"path": [
										"user",
										"{{user0_id}}",
										"edit",
										"{{user0_key}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.execution.skipRequest();",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "setup user0",
			"item": [
				{
					"name": "__setup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = {\r",
									"  id: pm.variables.replaceIn(\"{{$randomInt}}\"),\r",
									"  key: pm.variables.replaceIn(\"{{$randomPassword}}\"),\r",
									"  username: pm.variables.replaceIn(\"{{$randomUserName}}\"),\r",
									"  display_name: pm.variables.replaceIn(\"{{#$randomFullName}}\"),\r",
									"}\r",
									"const jsonEncoded = JSON.stringify(user0, (k, v) => {\r",
									"  if (typeof v === \"string\") {\r",
									"    return encodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"});\r",
									"\r",
									"pm.environment.set(\"user0\", jsonEncoded);\r",
									"\r",
									"pm.execution.skipRequest();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"msg\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "failure user0",
			"item": [
				{
					"name": "---failure start---",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.execution.skipRequest();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "/user: create user #Ext1 --no-username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing 'username'\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: create user #Ext1 --no-username/display_name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing 'username'\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --no-user_id/username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"user not found\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --fake-user_id&fake-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"user not found\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?id={{$randomInt}}&username={{$randomUserName}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "{{$randomInt}}"
								},
								{
									"key": "username",
									"value": "{{$randomUserName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing username\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_key\", user0.key);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"display_name\": \"${{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user0_id}}/edit/{{user0_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user0_id}}",
								"edit",
								"{{user0_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-display_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing display_name\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_key\", user0.key);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user0_id}}/edit/{{user0_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user0_id}}",
								"edit",
								"{{user0_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-username-display_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing metatdata\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_key\", user0.key);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user0_id}}/edit/{{user0_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user0_id}}",
								"edit",
								"{{user0_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --fake-id&key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_key\", user0.key);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{$randomInt}}/edit/{{user0_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{$randomInt}}",
								"edit",
								"{{user0_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "---failure end---",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.execution.skipRequest();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "create user1 --no-display_name",
			"item": [
				{
					"name": "/user: create user #Ext1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return id, key, username\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"id\");\r",
									"  pm.response.to.have.jsonBody(\"key\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { id = null, key = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(id)).to.be.true;\r",
									"  pm.expect(id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'key' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof key === 'string').to.be.true;\r",
									"  pm.expect(!key.trim()).to.be.false;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"\r",
									"const user1 = { id, key, username, display_name };\r",
									"const jsonEncoded = JSON.stringify(user1, (k, v) => {\r",
									"  if (typeof v === \"string\") {\r",
									"    return encodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"});\r",
									"\r",
									"pm.environment.set(\"user1\", jsonEncoded);\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(400);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username, display_name\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"user_id\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"  pm.response.to.have.jsonBody(\"display_name\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { user_id = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'user_id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
									"  pm.expect(user_id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"if (display_name !== null) {\r",
									"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
									"    pm.expect(typeof display_name === 'string').to.be.true;\r",
									"    pm.expect(!display_name.trim()).to.be.false;\r",
									"  });\r",
									"}\r",
									"\r",
									"const theUser = JSON.parse(pm.environment.get(\"user1\"), (k, v) => {\r",
									"  if (typeof v === 'string') {\r",
									"    return decodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"})\r",
									"pm.test(\"return correct user_id, username, display_name\", () => {\r",
									"  pm.expect(user_id).equal(theUser.id);\r",
									"  pm.expect(username).equal(theUser.username);\r",
									"  pm.expect(display_name).equal(theUser.display_name);\r",
									"})\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(404);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user1 = JSON.parse(pm.environment.get(\"user1\"));\r",
									"\r",
									"pm.environment.set(\"user1_id\", user1.id);\r",
									"pm.environment.set(\"user1_username\", user1.username);\r",
									"pm.environment.set(\"user1_display_name\", user1.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?id={{user1_id}}&username={{user1_username}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "{{user1_id}}"
								},
								{
									"key": "username",
									"value": "{{user1_username}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --no-user_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username, display_name\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"user_id\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"  pm.response.to.have.jsonBody(\"display_name\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { user_id = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'user_id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
									"  pm.expect(user_id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"if (display_name !== null) {\r",
									"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
									"    pm.expect(typeof display_name === 'string').to.be.true;\r",
									"    pm.expect(!display_name.trim()).to.be.false;\r",
									"  });\r",
									"}\r",
									"\r",
									"const theUser = JSON.parse(pm.environment.get(\"user1\"), (k, v) => {\r",
									"  if (typeof v === 'string') {\r",
									"    return decodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"})\r",
									"pm.test(\"return correct user_id, username, display_name\", () => {\r",
									"  pm.expect(user_id).equal(theUser.id);\r",
									"  pm.expect(username).equal(theUser.username);\r",
									"  pm.expect(display_name).equal(theUser.display_name);\r",
									"})\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(404);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user1 = JSON.parse(pm.environment.get(\"user1\"));\r",
									"\r",
									"pm.environment.set(\"user1_id\", user1.id);\r",
									"pm.environment.set(\"user1_username\", user1.username);\r",
									"pm.environment.set(\"user1_display_name\", user1.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?username={{user1_username}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "username",
									"value": "{{user1_username}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --no-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username, display_name\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"user_id\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"  pm.response.to.have.jsonBody(\"display_name\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { user_id = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'user_id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
									"  pm.expect(user_id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"if (display_name !== null) {\r",
									"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
									"    pm.expect(typeof display_name === 'string').to.be.true;\r",
									"    pm.expect(!display_name.trim()).to.be.false;\r",
									"  });\r",
									"}\r",
									"\r",
									"const theUser = JSON.parse(pm.environment.get(\"user1\"), (k, v) => {\r",
									"  if (typeof v === 'string') {\r",
									"    return decodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"})\r",
									"pm.test(\"return correct user_id, username, display_name\", () => {\r",
									"  pm.expect(user_id).equal(theUser.id);\r",
									"  pm.expect(username).equal(theUser.username);\r",
									"  pm.expect(display_name).equal(theUser.display_name);\r",
									"})\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(404);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user1 = JSON.parse(pm.environment.get(\"user1\"));\r",
									"\r",
									"pm.environment.set(\"user1_id\", user1.id);\r",
									"pm.environment.set(\"user1_username\", user1.username);\r",
									"pm.environment.set(\"user1_display_name\", user1.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?id={{user1_id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "{{user1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --user_id&fake-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username, display_name\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"user_id\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"  pm.response.to.have.jsonBody(\"display_name\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { user_id = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'user_id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
									"  pm.expect(user_id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"if (display_name !== null) {\r",
									"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
									"    pm.expect(typeof display_name === 'string').to.be.true;\r",
									"    pm.expect(!display_name.trim()).to.be.false;\r",
									"  });\r",
									"}\r",
									"\r",
									"const theUser = JSON.parse(pm.environment.get(\"user1\"), (k, v) => {\r",
									"  if (typeof v === 'string') {\r",
									"    return decodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"})\r",
									"pm.test(\"return correct user_id, username, display_name\", () => {\r",
									"  pm.expect(user_id).equal(theUser.id);\r",
									"  pm.expect(username).equal(theUser.username);\r",
									"  pm.expect(display_name).equal(theUser.display_name);\r",
									"})\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(404);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user1 = JSON.parse(pm.environment.get(\"user1\"));\r",
									"\r",
									"pm.environment.set(\"user1_id\", user1.id);\r",
									"pm.environment.set(\"user1_username\", user1.username);\r",
									"pm.environment.set(\"user1_display_name\", user1.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?id={{user1_id}}&username={{$randomUserName}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "{{user1_id}}"
								},
								{
									"key": "username",
									"value": "{{$randomUserName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --fake-user_id&username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username, display_name\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"user_id\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"  pm.response.to.have.jsonBody(\"display_name\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { user_id = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'user_id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
									"  pm.expect(user_id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"if (display_name !== null) {\r",
									"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
									"    pm.expect(typeof display_name === 'string').to.be.true;\r",
									"    pm.expect(!display_name.trim()).to.be.false;\r",
									"  });\r",
									"}\r",
									"\r",
									"const theUser = JSON.parse(pm.environment.get(\"user1\"), (k, v) => {\r",
									"  if (typeof v === 'string') {\r",
									"    return decodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"})\r",
									"pm.test(\"return correct user_id, username, display_name\", () => {\r",
									"  pm.expect(user_id).equal(theUser.id);\r",
									"  pm.expect(username).equal(theUser.username);\r",
									"  pm.expect(display_name).equal(theUser.display_name);\r",
									"})\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(404);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user1 = JSON.parse(pm.environment.get(\"user1\"));\r",
									"\r",
									"pm.environment.set(\"user1_id\", user1.id);\r",
									"pm.environment.set(\"user1_username\", user1.username);\r",
									"pm.environment.set(\"user1_display_name\", user1.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?id={{$randomInt}}&username={{user1_username}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "{{$randomInt}}"
								},
								{
									"key": "username",
									"value": "{{user1_username}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "------",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.execution.skipRequest();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --no-user_id/username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"user not found\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user1 = JSON.parse(pm.environment.get(\"user1\"));\r",
									"\r",
									"pm.environment.set(\"user1_id\", user1.id);\r",
									"pm.environment.set(\"user1_username\", user1.username);\r",
									"pm.environment.set(\"user1_display_name\", user1.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --fake-user_id&fake-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"user not found\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user1 = JSON.parse(pm.environment.get(\"user1\"));\r",
									"\r",
									"pm.environment.set(\"user1_id\", user1.id);\r",
									"pm.environment.set(\"user1_username\", user1.username);\r",
									"pm.environment.set(\"user1_display_name\", user1.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?id={{$randomInt}}&username={{$randomUserName}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "{{$randomInt}}"
								},
								{
									"key": "username",
									"value": "{{$randomUserName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username, display_name\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"user_id\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"  pm.response.to.have.jsonBody(\"display_name\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { user_id = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'user_id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
									"  pm.expect(user_id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof display_name === 'string').to.be.true;\r",
									"  pm.expect(!display_name.trim()).to.be.false;\r",
									"});\r",
									"\r",
									"const theUser = JSON.parse(pm.environment.get(\"user1\"), (k, v) => {\r",
									"  if (typeof v === 'string') {\r",
									"    return decodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"})\r",
									"const req = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"'user_id' should not change\", () => {\r",
									"  pm.expect(user_id).equal(theUser.id);\r",
									"})\r",
									"pm.test(\"return updated username, display_name\", () => {\r",
									"  pm.expect(username).equal(req.username);\r",
									"  pm.expect(display_name).equal(req.display_name);\r",
									"})\r",
									"\r",
									"theUser.username = username;\r",
									"theUser.display_name = display_name;\r",
									"const jsonEncoded = JSON.stringify(theUser, (k, v) => {\r",
									"  if (typeof v === \"string\") {\r",
									"    return encodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"});\r",
									"\r",
									"pm.environment.set(\"user1\", jsonEncoded);\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(404);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user1 = JSON.parse(pm.environment.get(\"user1\"));\r",
									"\r",
									"pm.environment.set(\"user1_id\", user1.id);\r",
									"pm.environment.set(\"user1_key\", user1.key);\r",
									"pm.environment.set(\"user1_username\", user1.username);\r",
									"pm.environment.set(\"user1_display_name\", user1.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user1_id}}/edit/{{user1_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user1_id}}",
								"edit",
								"{{user1_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "------",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.execution.skipRequest();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing username\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user1 = JSON.parse(pm.environment.get(\"user1\"));\r",
									"\r",
									"pm.environment.set(\"user1_id\", user1.id);\r",
									"pm.environment.set(\"user1_key\", user1.key);\r",
									"pm.environment.set(\"user1_username\", user1.username);\r",
									"pm.environment.set(\"user1_display_name\", user1.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"display_name\": \"${{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user1_id}}/edit/{{user1_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user1_id}}",
								"edit",
								"{{user1_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-display_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing display_name\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user1 = JSON.parse(pm.environment.get(\"user1\"));\r",
									"\r",
									"pm.environment.set(\"user1_id\", user1.id);\r",
									"pm.environment.set(\"user1_key\", user1.key);\r",
									"pm.environment.set(\"user1_username\", user1.username);\r",
									"pm.environment.set(\"user1_display_name\", user1.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user1_id}}/edit/{{user1_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user1_id}}",
								"edit",
								"{{user1_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-username-display_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing metatdata\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user1 = JSON.parse(pm.environment.get(\"user1\"));\r",
									"\r",
									"pm.environment.set(\"user1_id\", user1.id);\r",
									"pm.environment.set(\"user1_key\", user1.key);\r",
									"pm.environment.set(\"user1_username\", user1.username);\r",
									"pm.environment.set(\"user1_display_name\", user1.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user1_id}}/edit/{{user1_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user1_id}}",
								"edit",
								"{{user1_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --wrong-id&key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user1 = JSON.parse(pm.environment.get(\"user1\"));\r",
									"\r",
									"pm.environment.set(\"user1_id\", user1.id);\r",
									"pm.environment.set(\"user1_key\", user1.key);\r",
									"pm.environment.set(\"user1_username\", user1.username);\r",
									"pm.environment.set(\"user1_display_name\", user1.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{$randomInt}}/edit/{{user1_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{$randomInt}}",
								"edit",
								"{{user1_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --id&wrong-key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"wrong key, forbidden\", () => {\r",
									"  pm.response.to.have.status(403);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user1 = JSON.parse(pm.environment.get(\"user1\"));\r",
									"\r",
									"pm.environment.set(\"user1_id\", user1.id);\r",
									"pm.environment.set(\"user1_key\", user1.key);\r",
									"pm.environment.set(\"user1_username\", user1.username);\r",
									"pm.environment.set(\"user1_display_name\", user1.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user1_id}}/edit/{{$randomPassword}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user1_id}}",
								"edit",
								"{{$randomPassword}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --existent-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"'username' already exists\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user1 = JSON.parse(pm.environment.get(\"user1\"));\r",
									"\r",
									"pm.environment.set(\"user1_id\", user1.id);\r",
									"pm.environment.set(\"user1_key\", user1.key);\r",
									"pm.environment.set(\"user1_username\", user1.username);\r",
									"pm.environment.set(\"user1_display_name\", user1.display_name);\r",
									"\r",
									"console.log(pm.request.url)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{user1_username}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user1_id}}/edit/{{user1_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user1_id}}",
								"edit",
								"{{user1_key}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "failure user0",
			"item": [
				{
					"name": "---failure start---",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.execution.skipRequest();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "/user: create user #Ext1 --no-username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing 'username'\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: create user #Ext1 --no-username/display_name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing 'username'\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --no-user_id/username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"user not found\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --fake-user_id&fake-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"user not found\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?id={{$randomInt}}&username={{$randomUserName}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "{{$randomInt}}"
								},
								{
									"key": "username",
									"value": "{{$randomUserName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing username\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_key\", user0.key);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"display_name\": \"${{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user0_id}}/edit/{{user0_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user0_id}}",
								"edit",
								"{{user0_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-display_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing display_name\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_key\", user0.key);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user0_id}}/edit/{{user0_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user0_id}}",
								"edit",
								"{{user0_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-username-display_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing metatdata\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_key\", user0.key);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user0_id}}/edit/{{user0_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user0_id}}",
								"edit",
								"{{user0_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --fake-id&key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_key\", user0.key);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{$randomInt}}/edit/{{user0_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{$randomInt}}",
								"edit",
								"{{user0_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "---failure end---",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.execution.skipRequest();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "create user2",
			"item": [
				{
					"name": "/user: create user #Ext1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return id, key, username\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"id\");\r",
									"  pm.response.to.have.jsonBody(\"key\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { id = null, key = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(id)).to.be.true;\r",
									"  pm.expect(id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'key' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof key === 'string').to.be.true;\r",
									"  pm.expect(!key.trim()).to.be.false;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"\r",
									"const user2 = { id, key, username, display_name };\r",
									"const jsonEncoded = JSON.stringify(user2, (k, v) => {\r",
									"  if (typeof v === \"string\") {\r",
									"    return encodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"});\r",
									"\r",
									"pm.environment.set(\"user2\", jsonEncoded);\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(400);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username, display_name\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"user_id\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"  pm.response.to.have.jsonBody(\"display_name\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { user_id = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'user_id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
									"  pm.expect(user_id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"if (display_name !== null) {\r",
									"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
									"    pm.expect(typeof display_name === 'string').to.be.true;\r",
									"    pm.expect(!display_name.trim()).to.be.false;\r",
									"  });\r",
									"}\r",
									"\r",
									"const theUser = JSON.parse(pm.environment.get(\"user2\"), (k, v) => {\r",
									"  if (typeof v === 'string') {\r",
									"    return decodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"})\r",
									"pm.test(\"return correct user_id, username, display_name\", () => {\r",
									"  pm.expect(user_id).equal(theUser.id);\r",
									"  pm.expect(username).equal(theUser.username);\r",
									"  pm.expect(display_name).equal(theUser.display_name);\r",
									"})\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(404);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user2 = JSON.parse(pm.environment.get(\"user2\"));\r",
									"\r",
									"pm.environment.set(\"user2_id\", user2.id);\r",
									"pm.environment.set(\"user2_username\", user2.username);\r",
									"pm.environment.set(\"user2_display_name\", user2.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?id={{user2_id}}&username={{user2_username}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "{{user2_id}}"
								},
								{
									"key": "username",
									"value": "{{user2_username}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --no-user_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username, display_name\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"user_id\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"  pm.response.to.have.jsonBody(\"display_name\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { user_id = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'user_id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
									"  pm.expect(user_id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"if (display_name !== null) {\r",
									"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
									"    pm.expect(typeof display_name === 'string').to.be.true;\r",
									"    pm.expect(!display_name.trim()).to.be.false;\r",
									"  });\r",
									"}\r",
									"\r",
									"const theUser = JSON.parse(pm.environment.get(\"user2\"), (k, v) => {\r",
									"  if (typeof v === 'string') {\r",
									"    return decodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"})\r",
									"pm.test(\"return correct user_id, username, display_name\", () => {\r",
									"  pm.expect(user_id).equal(theUser.id);\r",
									"  pm.expect(username).equal(theUser.username);\r",
									"  pm.expect(display_name).equal(theUser.display_name);\r",
									"})\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(404);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user2 = JSON.parse(pm.environment.get(\"user2\"));\r",
									"\r",
									"pm.environment.set(\"user2_id\", user2.id);\r",
									"pm.environment.set(\"user2_username\", user2.username);\r",
									"pm.environment.set(\"user2_display_name\", user2.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?username={{user2_username}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "username",
									"value": "{{user2_username}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --no-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username, display_name\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"user_id\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"  pm.response.to.have.jsonBody(\"display_name\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { user_id = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'user_id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
									"  pm.expect(user_id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"if (display_name !== null) {\r",
									"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
									"    pm.expect(typeof display_name === 'string').to.be.true;\r",
									"    pm.expect(!display_name.trim()).to.be.false;\r",
									"  });\r",
									"}\r",
									"\r",
									"const theUser = JSON.parse(pm.environment.get(\"user2\"), (k, v) => {\r",
									"  if (typeof v === 'string') {\r",
									"    return decodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"})\r",
									"pm.test(\"return correct user_id, username, display_name\", () => {\r",
									"  pm.expect(user_id).equal(theUser.id);\r",
									"  pm.expect(username).equal(theUser.username);\r",
									"  pm.expect(display_name).equal(theUser.display_name);\r",
									"})\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(404);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user2 = JSON.parse(pm.environment.get(\"user2\"));\r",
									"\r",
									"pm.environment.set(\"user2_id\", user2.id);\r",
									"pm.environment.set(\"user2_username\", user2.username);\r",
									"pm.environment.set(\"user2_display_name\", user2.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?id={{user2_id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "{{user2_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --user_id&fake-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username, display_name\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"user_id\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"  pm.response.to.have.jsonBody(\"display_name\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { user_id = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'user_id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
									"  pm.expect(user_id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"if (display_name !== null) {\r",
									"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
									"    pm.expect(typeof display_name === 'string').to.be.true;\r",
									"    pm.expect(!display_name.trim()).to.be.false;\r",
									"  });\r",
									"}\r",
									"\r",
									"const theUser = JSON.parse(pm.environment.get(\"user2\"), (k, v) => {\r",
									"  if (typeof v === 'string') {\r",
									"    return decodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"})\r",
									"pm.test(\"return correct user_id, username, display_name\", () => {\r",
									"  pm.expect(user_id).equal(theUser.id);\r",
									"  pm.expect(username).equal(theUser.username);\r",
									"  pm.expect(display_name).equal(theUser.display_name);\r",
									"})\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(404);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user2 = JSON.parse(pm.environment.get(\"user2\"));\r",
									"\r",
									"pm.environment.set(\"user2_id\", user2.id);\r",
									"pm.environment.set(\"user2_username\", user2.username);\r",
									"pm.environment.set(\"user2_display_name\", user2.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?id={{user2_id}}&username={{$randomUserName}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "{{user2_id}}"
								},
								{
									"key": "username",
									"value": "{{$randomUserName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --fake-user_id&username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username, display_name\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"user_id\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"  pm.response.to.have.jsonBody(\"display_name\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { user_id = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'user_id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
									"  pm.expect(user_id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"if (display_name !== null) {\r",
									"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
									"    pm.expect(typeof display_name === 'string').to.be.true;\r",
									"    pm.expect(!display_name.trim()).to.be.false;\r",
									"  });\r",
									"}\r",
									"\r",
									"const theUser = JSON.parse(pm.environment.get(\"user2\"), (k, v) => {\r",
									"  if (typeof v === 'string') {\r",
									"    return decodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"})\r",
									"pm.test(\"return correct user_id, username, display_name\", () => {\r",
									"  pm.expect(user_id).equal(theUser.id);\r",
									"  pm.expect(username).equal(theUser.username);\r",
									"  pm.expect(display_name).equal(theUser.display_name);\r",
									"})\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(404);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user2 = JSON.parse(pm.environment.get(\"user2\"));\r",
									"\r",
									"pm.environment.set(\"user2_id\", user2.id);\r",
									"pm.environment.set(\"user2_username\", user2.username);\r",
									"pm.environment.set(\"user2_display_name\", user2.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?id={{$randomInt}}&username={{user2_username}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "{{$randomInt}}"
								},
								{
									"key": "username",
									"value": "{{user2_username}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "------",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.execution.skipRequest();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --no-user_id/username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"user not found\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user2 = JSON.parse(pm.environment.get(\"user2\"));\r",
									"\r",
									"pm.environment.set(\"user2_id\", user2.id);\r",
									"pm.environment.set(\"user2_username\", user2.username);\r",
									"pm.environment.set(\"user2_display_name\", user2.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --fake-user_id&fake-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"user not found\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user2 = JSON.parse(pm.environment.get(\"user2\"));\r",
									"\r",
									"pm.environment.set(\"user2_id\", user2.id);\r",
									"pm.environment.set(\"user2_username\", user2.username);\r",
									"pm.environment.set(\"user2_display_name\", user2.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?id={{$randomInt}}&username={{$randomUserName}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "{{$randomInt}}"
								},
								{
									"key": "username",
									"value": "{{$randomUserName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username, display_name\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"user_id\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"  pm.response.to.have.jsonBody(\"display_name\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { user_id = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'user_id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
									"  pm.expect(user_id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof display_name === 'string').to.be.true;\r",
									"  pm.expect(!display_name.trim()).to.be.false;\r",
									"});\r",
									"\r",
									"const theUser = JSON.parse(pm.environment.get(\"user2\"), (k, v) => {\r",
									"  if (typeof v === 'string') {\r",
									"    return decodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"})\r",
									"const req = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"'user_id' should not change\", () => {\r",
									"  pm.expect(user_id).equal(theUser.id);\r",
									"})\r",
									"pm.test(\"return updated username, display_name\", () => {\r",
									"  pm.expect(username).equal(req.username);\r",
									"  pm.expect(display_name).equal(req.display_name);\r",
									"})\r",
									"\r",
									"theUser.username = username;\r",
									"theUser.display_name = display_name;\r",
									"const jsonEncoded = JSON.stringify(theUser, (k, v) => {\r",
									"  if (typeof v === \"string\") {\r",
									"    return encodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"});\r",
									"\r",
									"pm.environment.set(\"user2\", jsonEncoded);\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(404);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user2 = JSON.parse(pm.environment.get(\"user2\"));\r",
									"\r",
									"pm.environment.set(\"user2_id\", user2.id);\r",
									"pm.environment.set(\"user2_key\", user2.key);\r",
									"pm.environment.set(\"user2_username\", user2.username);\r",
									"pm.environment.set(\"user2_display_name\", user2.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user2_id}}/edit/{{user2_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user2_id}}",
								"edit",
								"{{user2_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "------",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.execution.skipRequest();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing username\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user2 = JSON.parse(pm.environment.get(\"user2\"));\r",
									"\r",
									"pm.environment.set(\"user2_id\", user2.id);\r",
									"pm.environment.set(\"user2_key\", user2.key);\r",
									"pm.environment.set(\"user2_username\", user2.username);\r",
									"pm.environment.set(\"user2_display_name\", user2.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"display_name\": \"${{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user2_id}}/edit/{{user2_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user2_id}}",
								"edit",
								"{{user2_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-display_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing display_name\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user2 = JSON.parse(pm.environment.get(\"user2\"));\r",
									"\r",
									"pm.environment.set(\"user2_id\", user2.id);\r",
									"pm.environment.set(\"user2_key\", user2.key);\r",
									"pm.environment.set(\"user2_username\", user2.username);\r",
									"pm.environment.set(\"user2_display_name\", user2.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user2_id}}/edit/{{user2_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user2_id}}",
								"edit",
								"{{user2_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-username-display_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing metatdata\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user2 = JSON.parse(pm.environment.get(\"user2\"));\r",
									"\r",
									"pm.environment.set(\"user2_id\", user2.id);\r",
									"pm.environment.set(\"user2_key\", user2.key);\r",
									"pm.environment.set(\"user2_username\", user2.username);\r",
									"pm.environment.set(\"user2_display_name\", user2.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user2_id}}/edit/{{user2_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user2_id}}",
								"edit",
								"{{user2_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --wrong-id&key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user2 = JSON.parse(pm.environment.get(\"user2\"));\r",
									"\r",
									"pm.environment.set(\"user2_id\", user2.id);\r",
									"pm.environment.set(\"user2_key\", user2.key);\r",
									"pm.environment.set(\"user2_username\", user2.username);\r",
									"pm.environment.set(\"user2_display_name\", user2.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{$randomInt}}/edit/{{user2_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{$randomInt}}",
								"edit",
								"{{user2_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --id&wrong-key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"wrong key, forbidden\", () => {\r",
									"  pm.response.to.have.status(403);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user2 = JSON.parse(pm.environment.get(\"user2\"));\r",
									"\r",
									"pm.environment.set(\"user2_id\", user2.id);\r",
									"pm.environment.set(\"user2_key\", user2.key);\r",
									"pm.environment.set(\"user2_username\", user2.username);\r",
									"pm.environment.set(\"user2_display_name\", user2.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user2_id}}/edit/{{$randomPassword}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user2_id}}",
								"edit",
								"{{$randomPassword}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --existent-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"'username' already exists\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user2 = JSON.parse(pm.environment.get(\"user2\"));\r",
									"\r",
									"pm.environment.set(\"user2_id\", user2.id);\r",
									"pm.environment.set(\"user2_key\", user2.key);\r",
									"pm.environment.set(\"user2_username\", user2.username);\r",
									"pm.environment.set(\"user2_display_name\", user2.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{user1_username}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user2_id}}/edit/{{user2_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user2_id}}",
								"edit",
								"{{user2_key}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "failure user0",
			"item": [
				{
					"name": "---failure start---",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.execution.skipRequest();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "/user: create user #Ext1 --no-username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing 'username'\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: create user #Ext1 --no-username/display_name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing 'username'\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --no-user_id/username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"user not found\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --fake-user_id&fake-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"user not found\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?id={{$randomInt}}&username={{$randomUserName}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "{{$randomInt}}"
								},
								{
									"key": "username",
									"value": "{{$randomUserName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing username\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_key\", user0.key);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"display_name\": \"${{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user0_id}}/edit/{{user0_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user0_id}}",
								"edit",
								"{{user0_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-display_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing display_name\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_key\", user0.key);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user0_id}}/edit/{{user0_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user0_id}}",
								"edit",
								"{{user0_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-username-display_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing metatdata\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_key\", user0.key);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user0_id}}/edit/{{user0_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user0_id}}",
								"edit",
								"{{user0_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --fake-id&key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_key\", user0.key);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{$randomInt}}/edit/{{user0_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{$randomInt}}",
								"edit",
								"{{user0_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "---failure end---",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.execution.skipRequest();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "create user3 --no-display_name",
			"item": [
				{
					"name": "/user: create user #Ext1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return id, key, username\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"id\");\r",
									"  pm.response.to.have.jsonBody(\"key\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { id = null, key = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(id)).to.be.true;\r",
									"  pm.expect(id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'key' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof key === 'string').to.be.true;\r",
									"  pm.expect(!key.trim()).to.be.false;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"\r",
									"const user3 = { id, key, username, display_name };\r",
									"const jsonEncoded = JSON.stringify(user3, (k, v) => {\r",
									"  if (typeof v === \"string\") {\r",
									"    return encodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"});\r",
									"\r",
									"pm.environment.set(\"user3\", jsonEncoded);\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(400);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username, display_name\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"user_id\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"  pm.response.to.have.jsonBody(\"display_name\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { user_id = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'user_id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
									"  pm.expect(user_id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"if (display_name !== null) {\r",
									"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
									"    pm.expect(typeof display_name === 'string').to.be.true;\r",
									"    pm.expect(!display_name.trim()).to.be.false;\r",
									"  });\r",
									"}\r",
									"\r",
									"const theUser = JSON.parse(pm.environment.get(\"user3\"), (k, v) => {\r",
									"  if (typeof v === 'string') {\r",
									"    return decodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"})\r",
									"pm.test(\"return correct user_id, username, display_name\", () => {\r",
									"  pm.expect(user_id).equal(theUser.id);\r",
									"  pm.expect(username).equal(theUser.username);\r",
									"  pm.expect(display_name).equal(theUser.display_name);\r",
									"})\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(404);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user3 = JSON.parse(pm.environment.get(\"user3\"));\r",
									"\r",
									"pm.environment.set(\"user3_id\", user3.id);\r",
									"pm.environment.set(\"user3_username\", user3.username);\r",
									"pm.environment.set(\"user3_display_name\", user3.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?id={{user3_id}}&username={{user3_username}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "{{user3_id}}"
								},
								{
									"key": "username",
									"value": "{{user3_username}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --no-user_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username, display_name\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"user_id\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"  pm.response.to.have.jsonBody(\"display_name\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { user_id = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'user_id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
									"  pm.expect(user_id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"if (display_name !== null) {\r",
									"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
									"    pm.expect(typeof display_name === 'string').to.be.true;\r",
									"    pm.expect(!display_name.trim()).to.be.false;\r",
									"  });\r",
									"}\r",
									"\r",
									"const theUser = JSON.parse(pm.environment.get(\"user3\"), (k, v) => {\r",
									"  if (typeof v === 'string') {\r",
									"    return decodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"})\r",
									"pm.test(\"return correct user_id, username, display_name\", () => {\r",
									"  pm.expect(user_id).equal(theUser.id);\r",
									"  pm.expect(username).equal(theUser.username);\r",
									"  pm.expect(display_name).equal(theUser.display_name);\r",
									"})\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(404);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user3 = JSON.parse(pm.environment.get(\"user3\"));\r",
									"\r",
									"pm.environment.set(\"user3_id\", user3.id);\r",
									"pm.environment.set(\"user3_username\", user3.username);\r",
									"pm.environment.set(\"user3_display_name\", user3.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?username={{user3_username}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "username",
									"value": "{{user3_username}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --no-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username, display_name\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"user_id\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"  pm.response.to.have.jsonBody(\"display_name\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { user_id = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'user_id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
									"  pm.expect(user_id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"if (display_name !== null) {\r",
									"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
									"    pm.expect(typeof display_name === 'string').to.be.true;\r",
									"    pm.expect(!display_name.trim()).to.be.false;\r",
									"  });\r",
									"}\r",
									"\r",
									"const theUser = JSON.parse(pm.environment.get(\"user3\"), (k, v) => {\r",
									"  if (typeof v === 'string') {\r",
									"    return decodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"})\r",
									"pm.test(\"return correct user_id, username, display_name\", () => {\r",
									"  pm.expect(user_id).equal(theUser.id);\r",
									"  pm.expect(username).equal(theUser.username);\r",
									"  pm.expect(display_name).equal(theUser.display_name);\r",
									"})\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(404);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user3 = JSON.parse(pm.environment.get(\"user3\"));\r",
									"\r",
									"pm.environment.set(\"user3_id\", user3.id);\r",
									"pm.environment.set(\"user3_username\", user3.username);\r",
									"pm.environment.set(\"user3_display_name\", user3.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?id={{user3_id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "{{user3_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --user_id&fake-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username, display_name\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"user_id\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"  pm.response.to.have.jsonBody(\"display_name\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { user_id = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'user_id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
									"  pm.expect(user_id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"if (display_name !== null) {\r",
									"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
									"    pm.expect(typeof display_name === 'string').to.be.true;\r",
									"    pm.expect(!display_name.trim()).to.be.false;\r",
									"  });\r",
									"}\r",
									"\r",
									"const theUser = JSON.parse(pm.environment.get(\"user3\"), (k, v) => {\r",
									"  if (typeof v === 'string') {\r",
									"    return decodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"})\r",
									"pm.test(\"return correct user_id, username, display_name\", () => {\r",
									"  pm.expect(user_id).equal(theUser.id);\r",
									"  pm.expect(username).equal(theUser.username);\r",
									"  pm.expect(display_name).equal(theUser.display_name);\r",
									"})\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(404);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user3 = JSON.parse(pm.environment.get(\"user3\"));\r",
									"\r",
									"pm.environment.set(\"user3_id\", user3.id);\r",
									"pm.environment.set(\"user3_username\", user3.username);\r",
									"pm.environment.set(\"user3_display_name\", user3.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?id={{user3_id}}&username={{$randomUserName}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "{{user3_id}}"
								},
								{
									"key": "username",
									"value": "{{$randomUserName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --fake-user_id&username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username, display_name\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"user_id\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"  pm.response.to.have.jsonBody(\"display_name\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { user_id = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'user_id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
									"  pm.expect(user_id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"if (display_name !== null) {\r",
									"  pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
									"    pm.expect(typeof display_name === 'string').to.be.true;\r",
									"    pm.expect(!display_name.trim()).to.be.false;\r",
									"  });\r",
									"}\r",
									"\r",
									"const theUser = JSON.parse(pm.environment.get(\"user3\"), (k, v) => {\r",
									"  if (typeof v === 'string') {\r",
									"    return decodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"})\r",
									"pm.test(\"return correct user_id, username, display_name\", () => {\r",
									"  pm.expect(user_id).equal(theUser.id);\r",
									"  pm.expect(username).equal(theUser.username);\r",
									"  pm.expect(display_name).equal(theUser.display_name);\r",
									"})\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(404);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user3 = JSON.parse(pm.environment.get(\"user3\"));\r",
									"\r",
									"pm.environment.set(\"user3_id\", user3.id);\r",
									"pm.environment.set(\"user3_username\", user3.username);\r",
									"pm.environment.set(\"user3_display_name\", user3.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?id={{$randomInt}}&username={{user3_username}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "{{$randomInt}}"
								},
								{
									"key": "username",
									"value": "{{user3_username}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "------",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.execution.skipRequest();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --no-user_id/username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"user not found\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user3 = JSON.parse(pm.environment.get(\"user3\"));\r",
									"\r",
									"pm.environment.set(\"user3_id\", user3.id);\r",
									"pm.environment.set(\"user3_username\", user3.username);\r",
									"pm.environment.set(\"user3_display_name\", user3.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --fake-user_id&fake-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"user not found\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user3 = JSON.parse(pm.environment.get(\"user3\"));\r",
									"\r",
									"pm.environment.set(\"user3_id\", user3.id);\r",
									"pm.environment.set(\"user3_username\", user3.username);\r",
									"pm.environment.set(\"user3_display_name\", user3.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?id={{$randomInt}}&username={{$randomUserName}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "{{$randomInt}}"
								},
								{
									"key": "username",
									"value": "{{$randomUserName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username, display_name\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.response.to.have.jsonBody(\"user_id\");\r",
									"  pm.response.to.have.jsonBody(\"username\");\r",
									"  pm.response.to.have.jsonBody(\"display_name\");\r",
									"});\r",
									"\r",
									"const res = pm.response.json();\r",
									"const { user_id = null, username = null, display_name = null } = res;\r",
									"\r",
									"pm.test(\"'user_id' is a postive int\", () => {\r",
									"  pm.expect(Number.isInteger(user_id)).to.be.true;\r",
									"  pm.expect(user_id > 0).to.be.true;\r",
									"});\r",
									"pm.test(\"'username' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof username === 'string').to.be.true;\r",
									"  pm.expect(!username.trim()).to.be.false;\r",
									"});\r",
									"pm.test(\"'display_name' is a non-trival, truthy string\", () => {\r",
									"  pm.expect(typeof display_name === 'string').to.be.true;\r",
									"  pm.expect(!display_name.trim()).to.be.false;\r",
									"});\r",
									"\r",
									"const theUser = JSON.parse(pm.environment.get(\"user3\"), (k, v) => {\r",
									"  if (typeof v === 'string') {\r",
									"    return decodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"})\r",
									"const req = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"'user_id' should not change\", () => {\r",
									"  pm.expect(user_id).equal(theUser.id);\r",
									"})\r",
									"pm.test(\"return updated username, display_name\", () => {\r",
									"  pm.expect(username).equal(req.username);\r",
									"  pm.expect(display_name).equal(req.display_name);\r",
									"})\r",
									"\r",
									"theUser.username = username;\r",
									"theUser.display_name = display_name;\r",
									"const jsonEncoded = JSON.stringify(theUser, (k, v) => {\r",
									"  if (typeof v === \"string\") {\r",
									"    return encodeURIComponent(v);\r",
									"  }\r",
									"  return v;\r",
									"});\r",
									"\r",
									"pm.environment.set(\"user3\", jsonEncoded);\r",
									"\r",
									"// pm.test(\"\", () => {\r",
									"//   pm.response.to.have.status(404);\r",
									"//   pm.response.to.have.jsonBody(\"err\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user3 = JSON.parse(pm.environment.get(\"user3\"));\r",
									"\r",
									"pm.environment.set(\"user3_id\", user3.id);\r",
									"pm.environment.set(\"user3_key\", user3.key);\r",
									"pm.environment.set(\"user3_username\", user3.username);\r",
									"pm.environment.set(\"user3_display_name\", user3.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user3_id}}/edit/{{user3_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user3_id}}",
								"edit",
								"{{user3_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "------",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.execution.skipRequest();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing username\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user3 = JSON.parse(pm.environment.get(\"user3\"));\r",
									"\r",
									"pm.environment.set(\"user3_id\", user3.id);\r",
									"pm.environment.set(\"user3_key\", user3.key);\r",
									"pm.environment.set(\"user3_username\", user3.username);\r",
									"pm.environment.set(\"user3_display_name\", user3.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"display_name\": \"${{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user3_id}}/edit/{{user3_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user3_id}}",
								"edit",
								"{{user3_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-display_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing display_name\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user3 = JSON.parse(pm.environment.get(\"user3\"));\r",
									"\r",
									"pm.environment.set(\"user3_id\", user3.id);\r",
									"pm.environment.set(\"user3_key\", user3.key);\r",
									"pm.environment.set(\"user3_username\", user3.username);\r",
									"pm.environment.set(\"user3_display_name\", user3.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user3_id}}/edit/{{user3_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user3_id}}",
								"edit",
								"{{user3_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-username-display_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing metatdata\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user3 = JSON.parse(pm.environment.get(\"user3\"));\r",
									"\r",
									"pm.environment.set(\"user3_id\", user3.id);\r",
									"pm.environment.set(\"user3_key\", user3.key);\r",
									"pm.environment.set(\"user3_username\", user3.username);\r",
									"pm.environment.set(\"user3_display_name\", user3.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user3_id}}/edit/{{user3_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user3_id}}",
								"edit",
								"{{user3_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --wrong-id&key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user3 = JSON.parse(pm.environment.get(\"user3\"));\r",
									"\r",
									"pm.environment.set(\"user3_id\", user3.id);\r",
									"pm.environment.set(\"user3_key\", user3.key);\r",
									"pm.environment.set(\"user3_username\", user3.username);\r",
									"pm.environment.set(\"user3_display_name\", user3.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{$randomInt}}/edit/{{user3_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{$randomInt}}",
								"edit",
								"{{user3_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --id&wrong-key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"wrong key, forbidden\", () => {\r",
									"  pm.response.to.have.status(403);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user3 = JSON.parse(pm.environment.get(\"user3\"));\r",
									"\r",
									"pm.environment.set(\"user3_id\", user3.id);\r",
									"pm.environment.set(\"user3_key\", user3.key);\r",
									"pm.environment.set(\"user3_username\", user3.username);\r",
									"pm.environment.set(\"user3_display_name\", user3.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user3_id}}/edit/{{$randomPassword}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user3_id}}",
								"edit",
								"{{$randomPassword}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --existent-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"'username' already exists\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user3 = JSON.parse(pm.environment.get(\"user3\"));\r",
									"\r",
									"pm.environment.set(\"user3_id\", user3.id);\r",
									"pm.environment.set(\"user3_key\", user3.key);\r",
									"pm.environment.set(\"user3_username\", user3.username);\r",
									"pm.environment.set(\"user3_display_name\", user3.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{user2_username}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user3_id}}/edit/{{user3_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user3_id}}",
								"edit",
								"{{user3_key}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "failure user0",
			"item": [
				{
					"name": "---failure start---",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.execution.skipRequest();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "/user: create user #Ext1 --no-username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing 'username'\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: create user #Ext1 --no-username/display_name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing 'username'\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --no-user_id/username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"user not found\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user: read user metadata #Ext2 --fake-user_id&fake-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"user not found\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/user?id={{$randomInt}}&username={{$randomUserName}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user"
							],
							"query": [
								{
									"key": "id",
									"value": "{{$randomInt}}"
								},
								{
									"key": "username",
									"value": "{{$randomUserName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing username\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_key\", user0.key);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"display_name\": \"${{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user0_id}}/edit/{{user0_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user0_id}}",
								"edit",
								"{{user0_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-display_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing display_name\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_key\", user0.key);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user0_id}}/edit/{{user0_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user0_id}}",
								"edit",
								"{{user0_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --no-username-display_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing metatdata\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_key\", user0.key);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{user0_id}}/edit/{{user0_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{user0_id}}",
								"edit",
								"{{user0_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<id>/edit/<key>: edit user metadata #Ext2 --fake-id&key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return user_id, username\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"  pm.response.to.have.jsonBody(\"err\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const user0 = JSON.parse(pm.environment.get(\"user0\"));\r",
									"\r",
									"pm.environment.set(\"user0_id\", user0.id);\r",
									"pm.environment.set(\"user0_key\", user0.key);\r",
									"pm.environment.set(\"user0_username\", user0.username);\r",
									"pm.environment.set(\"user0_display_name\", user0.display_name);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"display_name\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/user/{{$randomInt}}/edit/{{user0_key}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"user",
								"{{$randomInt}}",
								"edit",
								"{{user0_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "---failure end---",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.execution.skipRequest();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			]
		}
	]
}